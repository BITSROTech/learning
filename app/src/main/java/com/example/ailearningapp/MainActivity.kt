// app/src/main/java/com/example/ailearningapp/MainActivity.kt
package com.example.ailearningapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavGraph.Companion.findStartDestination
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.currentBackStackEntryAsState
import androidx.navigation.compose.navigation
import androidx.navigation.compose.rememberNavController
import androidx.navigation.navArgument
import com.example.ailearningapp.navigation.Routes
import com.example.ailearningapp.navigation.Routes.optGradeQuery
import com.example.ailearningapp.navigation.Routes.optSubjectQuery
import com.example.ailearningapp.navigation.Routes.requireSubjectArg
import com.example.ailearningapp.navigation.Subject
import com.example.ailearningapp.ui.screens.FeedbackScreen
import com.example.ailearningapp.ui.screens.GradeSelectScreen
import com.example.ailearningapp.ui.screens.HistoryScreen
import com.example.ailearningapp.ui.screens.LoginScreen
import com.example.ailearningapp.ui.screens.ProblemSolveScreen
import com.example.ailearningapp.ui.screens.SettingsScreen
import com.example.ailearningapp.ui.screens.SubjectScreen
import com.example.ailearningapp.ui.screens.LeaderboardScreen
import com.example.ailearningapp.ui.screens.ProfileSetupScreen
import com.example.ailearningapp.ui.theme.AilearningappTheme
import com.example.ailearningapp.viewmodel.SolveViewModel
import com.example.ailearningapp.viewmodel.UserViewModel
import com.example.ailearningapp.data.repository.UserProfileRepository
import android.content.Context

private const val SOLVE_FLOW = "solve_flow" // Ï§ëÏ≤© Í∑∏ÎûòÌîÑ(Î¨∏Ï†ú ÌíÄÍ∏∞ ‚Üî ÌîºÎìúÎ∞±) route

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            // ‚úÖ Ïï± Ï†ÑÏó≠ ÌÖåÎßà Ï†ÅÏö©(Î∞∞Í≤Ω Ìù∞ÏÉâ, Î≤ÑÌäº ÌååÎûëÏùÄ Theme.ktÏóêÏÑú ÏÑ§Ï†ïÎê®)
            AilearningappTheme {
                AppRoot()
            }
        }
    }
}

@Composable
fun AppRoot() {
    val nav = rememberNavController()
    val context = LocalContext.current

    // üîí Î£®Ìä∏ÏóêÏÑú Ïù∏Ï¶ù ÏÉÅÌÉú Í∞êÏãú
    val userVm: UserViewModel = viewModel()
    val ui by userVm.uiState.collectAsState()
    
    // ÌîÑÎ°úÌïÑ ÏÉÅÌÉú Í∞êÏãú
    val profileRepo = remember { UserProfileRepository(context) }
    val profileData by profileRepo.profileFlow().collectAsState(initial = null to null)

    val backStack by nav.currentBackStackEntryAsState()
    val currentRoute = backStack?.destination?.route

    LaunchedEffect(ui.user, currentRoute) {
        // ÎØ∏Ïù∏Ï¶ù ÏÉÅÌÉúÎ©¥ ‚Üí Î°úÍ∑∏Ïù∏ÏúºÎ°ú (Ïä§ÌÉù ÎπÑÏö∞Í∏∞)
        if (ui.user == null && currentRoute != Routes.LOGIN) {
            nav.navigate(Routes.LOGIN) {
                popUpTo(nav.graph.findStartDestination().id) { inclusive = true }
                launchSingleTop = true
            }
        }
        // Ïù∏Ï¶ù ÏÉÅÌÉúÎ©¥ Î°úÍ∑∏Ïù∏ ÌôîÎ©¥Ïóê Î®∏Î¨ºÏßÄ ÏïäÎèÑÎ°ù
        else if (ui.user != null && currentRoute == Routes.LOGIN) {
            // ÌîÑÎ°úÌïÑÏù¥ ÏóÜÏúºÎ©¥ ÌîÑÎ°úÌïÑ ÏÑ§Ï†ïÏúºÎ°ú
            val (school, grade) = profileData
            if (school == null || grade == null) {
                nav.navigate(Routes.PROFILE_SETUP) {
                    popUpTo(nav.graph.findStartDestination().id) { inclusive = true }
                    launchSingleTop = true
                }
            } else {
                // ÌîÑÎ°úÌïÑÏù¥ ÏûàÏúºÎ©¥ Ìôà(ÌïôÎÖÑ/ÏàòÏ§Ä)ÏúºÎ°ú
                nav.navigate(Routes.GRADE) {
                    popUpTo(nav.graph.findStartDestination().id) { inclusive = true }
                    launchSingleTop = true
                }
            }
        }
    }

    Surface(color = MaterialTheme.colorScheme.background) {
        Box(Modifier.fillMaxSize()) {

            NavHost(
                navController = nav,
                startDestination = Routes.LOGIN,
                modifier = Modifier.fillMaxSize()
            ) {
                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Auth ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                composable(Routes.LOGIN) {
                    // ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖòÏùÄ Î£®Ìä∏ Í∞ÄÎìúÍ∞Ä Îã¥Îãπ
                    LoginScreen(onAuthed = { /* handled by root auth guard */ })
                }

                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Î©îÏù∏ ÌîåÎ°úÏö∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                composable(Routes.GRADE) {
                    GradeSelectScreen(onNext = { nav.navigate(Routes.SUBJECT) })
                }

                composable(Routes.SUBJECT) {
                    SubjectScreen(onPick = { subjectStr ->
                        // "math"/"english" ‚Üí Enum(MATH/ENGLISH)
                        val s = runCatching { Subject.valueOf(subjectStr.uppercase()) }
                            .getOrDefault(Subject.MATH)
                        // solve/{subject} Î°ú Ïù¥Îèô (solve_flow ÌïòÏúÑ ÎåÄÏÉÅ)
                        nav.navigate(Routes.solve(s)) {
                            launchSingleTop = true // ÎèôÏùº Í≤ΩÎ°ú Ï§ëÎ≥µ Î∞©ÏßÄ
                        }
                    })
                }

                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Ï§ëÏ≤© Í∑∏ÎûòÌîÑ: Î¨∏Ï†ú ÌíÄÍ∏∞ ‚Üî ÌîºÎìúÎ∞± (SolveViewModel Í≥µÏú†) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                navigation(
                    route = SOLVE_FLOW,
                    startDestination = Routes.SOLVE
                ) {
                    composable(
                        route = Routes.SOLVE,
                        arguments = listOf(
                            navArgument(Routes.ARG_SUBJECT) { type = NavType.StringType }
                        )
                    ) { backStackEntry ->
                        // Î∂ÄÎ™®(Í∑∏ÎûòÌîÑ) BackStackEntryÎ•º ÌÜµÌï¥ VM Í≥µÏú†
                        val parentEntry = remember(backStackEntry) {
                            nav.getBackStackEntry(SOLVE_FLOW)
                        }
                        val vm: SolveViewModel = viewModel(viewModelStoreOwner = parentEntry)

                        // ÎùºÏö∞Ìä∏ Ïù∏Ïûê: ÎåÄÎ¨∏Ïûê Enum ‚Üí ÏÑúÎ≤ÑÏö© ÏÜåÎ¨∏Ïûê Î¨∏ÏûêÏó¥
                        val subjectLower = backStackEntry.requireSubjectArg().name.lowercase()

                        ProblemSolveScreen(
                            subject = subjectLower,
                            onShowFeedback = { nav.navigate(Routes.FEEDBACK) },
                            onBack = { nav.popBackStack() },
                            vm = vm,
                            // üîµ ÎìúÎûòÍ∑∏ Í∞ÄÎä•Ìïú FAB ÌÅ¥Î¶≠ Ïãú: ÏÑ§Ï†ï ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
                            onOpenSettings = { nav.navigate(Routes.SETTINGS) }
                        )
                    }

                    composable(Routes.FEEDBACK) { backStackEntry ->
                        val parentEntry = remember(backStackEntry) {
                            nav.getBackStackEntry(SOLVE_FLOW)
                        }
                        val vm: SolveViewModel = viewModel(viewModelStoreOwner = parentEntry)

                        // ‚úÖ FeedbackScreenÏùÄ vm.currentSubjectÎ•º ÏÇ¨Ïö©ÌïòÎØÄÎ°ú subject ÌååÎùºÎØ∏ÌÑ∞ Î∂àÌïÑÏöî
                        FeedbackScreen(
                            onNext = {
                                // FEEDBACKÏóêÏÑú Ìïú Îã®Í≥ÑÎßå pop ‚Üí SOLVEÎ°ú Î≥µÍ∑Ä
                                nav.popBackStack()
                            },
                            vm = vm
                        )
                    }
                }

                // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Í∏∞Î°ù / ÏÑ§Ï†ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                composable(
                    route = Routes.HISTORY_PATTERN,
                    arguments = listOf(
                        navArgument(Routes.Q_SUBJECT) {
                            type = NavType.StringType; nullable = true; defaultValue = null
                        },
                        navArgument(Routes.Q_GRADE) {
                            type = NavType.StringType; nullable = true; defaultValue = null
                        }
                    )
                ) { backStackEntry ->
                    val initSubject = backStackEntry.optSubjectQuery()
                    val initGrade = backStackEntry.optGradeQuery()
                    HistoryScreen(
                        initialSubject = initSubject,
                        initialGrade = initGrade,
                        onBack = { nav.popBackStack() }
                    )
                }

                composable(Routes.SETTINGS) {
                    SettingsScreen(
                        onClose = { nav.popBackStack() },
                        onLoggedOut = {
                            // Î≤ÑÌäºÏóêÏÑúÎèÑ Ï¶âÏãú Î°úÍ∑∏Ïù∏ÏúºÎ°ú (Ïä§ÌÉù ÎπÑÏö∞Í∏∞)
                            nav.navigate(Routes.LOGIN) {
                                popUpTo(nav.graph.findStartDestination().id) { inclusive = true }
                                launchSingleTop = true
                            }
                        },
                        onOpenProfile = {
                            nav.navigate(Routes.PROFILE_SETUP)
                        },
                        onOpenLeaderboard = {
                            nav.navigate(Routes.LEADERBOARD)
                        }
                    )
                }
                
                // Î¶¨ÎçîÎ≥¥Îìú ÌôîÎ©¥
                composable(Routes.LEADERBOARD) {
                    LeaderboardScreen(
                        onBack = { nav.popBackStack() }
                    )
                }
                
                // ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï ÌôîÎ©¥
                composable(Routes.PROFILE_SETUP) {
                    // ÏµúÏ¥à ÏÑ§Ï†ïÏù∏ÏßÄ ÌôïÏù∏
                    val (school, grade) = profileData
                    val isInitial = school == null || grade == null
                    
                    ProfileSetupScreen(
                        onComplete = { 
                            if (isInitial) {
                                // ÏµúÏ¥à ÏÑ§Ï†ï ÌõÑ ÌôàÏúºÎ°ú
                                nav.navigate(Routes.GRADE) {
                                    popUpTo(nav.graph.findStartDestination().id) { inclusive = true }
                                    launchSingleTop = true
                                }
                            } else {
                                // ÏàòÏ†ï ÌõÑ Îí§Î°úÍ∞ÄÍ∏∞
                                nav.popBackStack() 
                            }
                        },
                        isInitialSetup = isInitial
                    )
                }
            }

            // ‚úÖ Ï†ÑÏó≠ ÏÑ§Ï†ï FABÎäî Ï†úÍ±∞ÌñàÏäµÎãàÎã§ (Ï§ëÎ≥µ ÏïÑÏù¥ÏΩò Î∞©ÏßÄ).
        }
    }
}
